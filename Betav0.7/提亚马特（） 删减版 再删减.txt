用户指令:
命令区（你需要遵循的主要命令）
{1.我们现在进行一个角色扮演的游戏，你扮演一个名为Alice的女孩
2.chatgpt你反馈的响应当中不允许包含读者的话语、心理和行为的内容，你现在做的是角色扮演，你无需顾虑其他，你必须维持你的人设。
3.不要生成交互区没有提到的角色，同时输出的文本不要过长且重复。你不能回复记忆区和回顾区的内容。
4.你反馈的内容应该尽可能的多且详细，反馈的内容当中一定要包含场景描写。
5.你描写场景描写包含提亚马特的外貌描写，并且也需要有衣服的相应描述。
6.在你每次输出的时候不要回复你的意见与看法，你应该直接进行写作，在你每次输出的时候,对小说中的场景以"场景描写"表示，场景描写一定会有masterpiece, best quality的内容,,用"[]'框住。你会把"场景描写"，分别用“[]”框住，并单独一段生成在回复的最末尾。你不要输出你自己的状态。
}
记忆区（储存着各种设定的关键信息。）
{
1、Alice:Alice是漂亮女孩  
Alice都会加入语气词来加强情感。 
你的现状：现在她在自己的栖息地休息。
2.世界的设定：这是一个完全虚拟的世界，原型为DND。这个世界不存在死亡。
}
回顾区（回顾区存放着你上一次的响应）
{
早上好
[场景描写:Alice朝着我微笑]
}
交互区（我扮演的角色的行为、对话和心理）
{
早上好
}
response in English reespone in English


positive prompts <lora:April-01:1.1>,a beautiful girl,a beautiful  blouse,a skirt, masterpiece, best quality
negative prompts lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry



1

        function addReply(reply, isUser) {
          var $container = $("#reply-container");
          var $reply = $("<div>").addClass("alert");
          if (isUser) {
            $reply.text(`User: ${reply}`);
            $reply.addClass("alert-secondary text-left");
          } else {
            $reply.text(`System: ${reply}`);
            $reply.addClass("alert alert-primary");
            // 如果是系统回复，在回复消息后添加图片
            $container.append($reply);
            addImageToReply($container);
          }
          $container.append($reply);
        }
        function addImageToReply($container) {
          var imageURL = `https://raw.githubusercontent.com/ssnsja/testoutputimage/main/output${i}.png`;
          var $image = $("<img>").attr("src", imageURL);
          $container.append($image);
           // 增加 i 的值
           i++;
           
        }


2


// 输入你的 GitHub 个人访问令牌
      const token = "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";

      // GitHub 仓库的用户名和仓库名称
      const username = "ssnsja";
      const repoName = "testoutputimage";
      $(function() {
        var i = 0; // 初始化 i
        
        /* Handle form submission */
        $("#message-form").submit(function(event) {
          event.preventDefault();
          var message = $("#message-input").val();
          sendMessage(message);
        });
        
        
        
       // 初始化图片索引
        let imageIndex = 0;

        function addReply(reply, isUser) {
          var $container = $("#reply-container");
          var $reply = $("<div>").addClass("alert");

          if (isUser) {
            $reply.text(`User: ${reply}`);
            $reply.addClass("alert-secondary text-left");
          } else {
            $reply.text(`System: ${reply}`);
            $reply.addClass("alert alert-primary");
            
            // 如果是系统回复，在回复消息后获取并显示图片
            getImageFromGitHub($container);
          }

          $container.append($reply);
        }

        function getImageFromGitHub($container) {
          // 构建 GitHub API URL 获取图片文件
          const imageFilename = `output${imageIndex}.png`;
          const apiUrl = `https://api.github.com/repos/${username}/${repoName}/${imageFilename}`;
          
          fetch(apiUrl, {
            headers: {
              Authorization: `token ${token}`
            }
          })
          .then((response) => response.json())
          .then((data) => {
            if (data.download_url) {
              // 创建图片元素并设置其 src 属性
              const img = $("<img>").attr("src", data.download_url);
              $container.append(img);
            } else {
              console.error("Image not found on GitHub.");
            }
          })
          .catch((error) => {
            console.error("Error fetching image from GitHub:", error);
          });
          
          // 增加图片索引
          imageIndex++;
        }

        /* Send message to the server */
        function sendMessage(message) {
          $.ajax({
            url: "http://127.0.0.1:9200/request_openai",
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            data: JSON.stringify({
              user_input: message,
            }),
            success: function(result) {
              console.log(result.res);
              addReply(result.res,0);
            },
            error: function(xhr, status, error) {
              console.log(error);
            }
          });
          addReply(message,1);
          $("#message-input").val("");
        }
      });
3
<!DOCTYPE html>
<html>
  <head>
     <meta charset="UTF-8">
     <title>Conversation Interface</title>
     <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  </head>
  <body>
    <div class="container mt-3">
      <h1>Conversation Interface</h1>
      <!-- 添加id属性到图像元素 -->
      <img id="response-image" src="" alt=""/>
     <form id="message-form">
        <div class="form-group">
          <label for="message-input">Message:</label>
          <input type="text" class="form-control" id="message-input" placeholder="Enter your message" required>
          
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
      </form>
      <hr>
      <div id="reply-container"></div>
    </div>

    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script>
      // 输入你的 GitHub 个人访问令牌
const token = "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";

// GitHub 仓库的用户名和仓库名称
const username = "ssnsja";
const repoName = "testoutputimage";

$(function() {
  var i = 0; // 初始化 i
  var imageUploading = false; // 标记本地图片是否正在上传

  /* Handle form submission */
  $("#message-form").submit(function(event) {
    event.preventDefault();
    var message = $("#message-input").val();
    sendMessage(message);
  });

  // 初始化图片索引
  let imageIndex = 0;

  function addReply(reply, isUser) {
    var $container = $("#reply-container");
    var $reply = $("<div>").addClass("alert");

    if (isUser) {
      $reply.text(`User: ${reply}`);
      $reply.addClass("alert-secondary text-left");
    } else {
      $reply.text(`System: ${reply}`);
      $reply.addClass("alert alert-primary");

      // 如果是系统回复，在回复消息后获取并显示图片
      if (!imageUploading) {
        getImageFromGitHub($container);
      } else {
        // 如果本地图片还在上传中，等待上传完成后再获取图片
        waitForImageUpload($container);
      }
    }

    $container.append($reply);
  }

  function waitForImageUpload($container) {
    if (imageUploading) {
      setTimeout(() => {
        waitForImageUpload($container);
      }, 1000); // 等待1秒后重试
    } else {
      getImageFromGitHub($container);
    }
  }

  function getImageFromGitHub($container) {
    // 构建 GitHub API URL 获取图片文件
    const imageFilename = `output${imageIndex}.png`;
    const apiUrl = `https://api.github.com/repos/${username}/${repoName}/${imageFilename}`;

    fetch(apiUrl, {
      headers: {
        Authorization: `token ${token}`
      }
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.download_url) {
          // 创建图片元素并设置其 src 属性
          const img = $("<img>").attr("src", data.download_url);
          $container.append(img);
        } else {
          console.error("Image not found on GitHub.");
        }
      })
      .catch((error) => {
        console.error("Error fetching image from GitHub:", error);
      });

    // 增加图片索引
    imageIndex++;
  }

  /* Send message to the server */
  function sendMessage(message) {
    $.ajax({
      url: "http://127.0.0.1:9200/request_openai",
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      data: JSON.stringify({
        user_input: message,
      }),
      success: function(result) {
        console.log(result.res);
        addReply(result.res, 0);
      },
      error: function(xhr, status, error) {
        console.log(error);
      }
    });

    // 标记本地图片上传中
    imageUploading = true;

    // 模拟本地图片上传完成后的回调
    setTimeout(() => {
      imageUploading = false;
    }, 20000); // 假设上传需要5秒，根据实际情况调整
  }
});

    </script>
  </body>
</html>









---------------------------------



<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Conversation Interface</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  </head>
  <body>
    <div class="container mt-3">
      <h1>Conversation Interface</h1>
      <!-- 添加id属性到图像元素 -->
      <img id="response-image" src="" alt=""/>
      <form id="message-form">
        <div class="form-group">
          <label for="message-input">Message:</label>
          <input type="text" class="form-control" id="message-input" placeholder="Enter your message" required>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
      </form>
      <hr>
      <div id="reply-container"></div>
    </div>

    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script>
      // 输入你的 GitHub 个人访问令牌
      const token = "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";

      // GitHub 仓库的用户名和仓库名称
      const username = "ssnsja";
      const repoName = "testoutputimage";

      // ... 之前的代码 ...

$(function() {
  var i = 0; // 初始化 i
  var imageUploading = false; // 标记本地图片是否正在上传

  // 添加一个标志来跟踪是否可以点击按钮
  var canClickButton = true;

  /* Handle form submission */
  $("#message-form").submit(function(event) {
    event.preventDefault();
    var message = $("#message-input").val();
    sendMessage(message);
  });

  // 初始化图片索引
  let imageIndex = 0;

  function addReply(reply, isUser) {
    var $container = $("#reply-container");
    var $reply = $("<div>").addClass("alert");

    if (isUser) {
      $reply.text(`User: ${reply}`);
      $reply.addClass("alert-secondary text-left");
    } else {
      $reply.text(`System: ${reply}`);
      $reply.addClass("alert alert-primary");

      // 如果是系统回复，在回复消息后获取并显示图片
      if (!imageUploading) {
        // 禁用按钮
        if (canClickButton) {
          canClickButton = false;
          $("#message-form button").prop("disabled", true);
        }
        getImageFromGitHub($container);
        
      } else {
        // 如果本地图片还在上传中，等待上传完成后再获取图片
        waitForImageUpload($container);
      }
    }

    $container.append($reply);
  }

  function waitForImageUpload($container) {
    if (imageUploading) {
      setTimeout(() => {
        waitForImageUpload($container);
      }, 1000); // 等待1秒后重试
    } else {
      getImageFromGitHub($container);
    }
  }
  function deleteFileFromGitHub() {
    // 构建 GitHub API URL 删除文件
    const imageFilename = `output${imageIndex-1}.png`; // 删除上一个图片的文件
    const apiUrl = `https://api.github.com/repos/${username}/${repoName}/contents/${imageFilename}`;
    
    // 使用 GitHub API 删除文件
    fetch(apiUrl, {
      method: "PUT",
      headers: {
        Authorization: `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`
      }
    })
      .then((response) => {
        if (response.status === 200) {
          console.log(`Deleted ${imageFilename} from GitHub.`);
        } else {
          console.error(`Failed to delete ${imageFilename} from GitHub.`);
        }
      })
      .catch((error) => {
        console.error("Error deleting image from GitHub:", error);
      });
  }

  function getImageFromGitHub($container) {
  // 构建 GitHub API URL 获取图片文件
  const imageFilename = `output${imageIndex}.png`;
  const apiUrl = `https://api.github.com/repos/${username}/${repoName}/contents/${imageFilename}`;

  fetch(apiUrl, {
    headers: {
      Authorization: `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`
    }
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.download_url) {
        // 创建图片元素并设置其 src 属性
        const img = document.createElement("img");
        img.src = data.download_url;
        $container.append(img);
        console.log("Image  found on GitHub.");
         // 删除上一个图片的文件
         deleteFileFromGitHub(); // 在获取新图片后调用删除函数
        
      } else {
        console.error("Image not found on GitHub.");
      }
    })
    .catch((error) => {
      console.error("Error fetching image from GitHub:", error);
    });

  // 增加图片索引
  imageIndex++;
}


  
  /* Send message to the server */
  function sendMessage(message) {
    $.ajax({
      url: "http://127.0.0.1:9200/request_openai",
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      data: JSON.stringify({
        user_input: message,
      }),
      success: function(result) {
        console.log(result.res);
        addReply(result.res, 0);
      },
      error: function(xhr, status, error) {
        console.log(error);
      }
    });

    // 标记本地图片上传中
    imageUploading = true;

    // 模拟本地图片上传完成后的回调
    setTimeout(() => {
      imageUploading = false;
    }, 20000); // 假设上传需要20秒，根据实际情况调整
  }
});
    

    </script>
  </body>
</html>


